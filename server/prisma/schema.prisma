// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  username     String   @unique
  passwordSalt String?
  passwordHash String?
  googleId     String?  @unique
  firstName    String?
  middleName   String?
  lastName     String?
  role         Role?
  email        String   @unique
  displayPic   String?

  // m-n -> User can belong to many teams
  teams Team[]

  // 1-n User can create many teams
  createdTeams Team[] @relation("CreatedTeam")
}

model Team {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?

  // m-n -> Team can have many users
  users User[]

  // 1-n -> Team can have many projects
  projects Project[]

  // 1-n -> Team can be created by 1 user
  createdBy       User @relation("CreatedTeam", fields: [createdByUserId], references: [id])
  createdByUserId Int
}

model Project {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?

  // 1-n -> Project can belong to 1 team
  Team   Team @relation(fields: [teamId], references: [id])
  teamId Int

  // 1-n -> Project can have many videos
  videos Video[]
}

model Video {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  videoUrl    String

  // 1-n -> Video can belong to 1 project
  Project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  // 1-1 -> Video can have one transcript
  transcript Transcript?

  // 1-n -> Video can have many speakers
  Speaker Speaker[]
}

model Speaker {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String
  organization String?
  email        String?

  // 1-n -> Speaker can belong to 1 video
  Video   Video @relation(fields: [videoId], references: [id])
  videoId Int
}

model Transcript {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  transcriptText String

  // 1-1 -> Transcript can have one video
  Video   Video @relation(fields: [videoId], references: [id])
  videoId Int   @unique

  // 1-n -> Transcript can have many tags
  tags Tag[]
}

model Tag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tag       String

  // 1-n -> Tag can belong to one Transcript
  Transcript   Transcript? @relation(fields: [transcriptId], references: [id])
  transcriptId Int?

  // 1-n -> Tag can belong to one Criteria
  Criteria   Criteria @relation(fields: [criteriaId], references: [id])
  criteriaId Int
}

model Criteria {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  // 1-n -> Criteria can have many tags
  tags Tag[]
}

// For statistics and role based auth purposes down the line
enum Role {
  CUSTOMER_SUCCESS
  DESIGN
  ENGINEERING
  FINANCE
  LEGAL
  MANAGEMENT
  MARKETING
  OPERATIONS
  PRODUCT_MANAGEMENT
  RESEARCH
  SALES
  SUPPORT
  OTHER
}
